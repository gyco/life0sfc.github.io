<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>life0sfc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://life0sfc.github.io/"/>
  <updated>2018-10-14T03:55:51.970Z</updated>
  <id>https://life0sfc.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://life0sfc.github.io/2019/02/03/正则表达式/</id>
    <published>2019-02-03T09:05:32.257Z</published>
    <updated>2018-10-14T03:55:51.970Z</updated>
    
    <content type="html"><![CDATA[<p>regex用于匹配相应的类型，通常用于对于文本中的字符进行匹配和提取,以下只介绍python re模块的常见方法和regex的常见通配符</p><h3 id="python-re库"><a href="#python-re库" class="headerlink" title="python re库"></a>python re库</h3><h5 id="1-re-compile-pattern-flags-0"><a href="#1-re-compile-pattern-flags-0" class="headerlink" title="1. re.compile(pattern, flags=0)"></a>1. re.compile(pattern, flags=0)</h5><p>编译一个正则表达式对象，在利用该对象去调用match()、search()等方法</p><pre><code>reg = re.compile(r&apos;\d\d\d-\d\d\d-\d\d\d\d&apos;)  //在字符串的第一个引号之前加上 r，可以将该字符串标记为原始字符串，它不包括转义字符</code></pre><h5 id="2-re-match-pattern-string"><a href="#2-re-match-pattern-string" class="headerlink" title="2. re.match(pattern, string)"></a>2. re.match(pattern, string)</h5><p>如果字符串开头的零个或多个字符与正则表达式模式匹配，则返回相应的匹配对象。</p><h5 id="3-re-search-pattern-string-flags-0"><a href="#3-re-search-pattern-string-flags-0" class="headerlink" title="3. re.search(pattern, string, flags=0)"></a>3. re.search(pattern, string, flags=0)</h5><p>查找传入的整个string，寻找该正则表达式的所有匹配。如果字符串中没有找到该正则表达式模式，search()方法将返回None。如果找到了该模式， search()方法将返回一个Match对像</p><h5 id="4-re-findall-pattern-string-flags-0"><a href="#4-re-findall-pattern-string-flags-0" class="headerlink" title="4. re.findall(pattern, string, flags=0)"></a>4. re.findall(pattern, string, flags=0)</h5><p>将返回一组字符串，包含被查找字符串中的所有匹配</p><h5 id="5-匹配分组"><a href="#5-匹配分组" class="headerlink" title="5. 匹配分组"></a>5. 匹配分组</h5><ul><li>(…)分组匹配括号内的正则表达式，执行匹配后可使用group()检索匹配内容</li><li>(){}花括号中为匹配()中分组的个数，为数字</li></ul><p>match对象调用group()方法，group(0)返回所有匹配的分组，groups()返回包含匹配的所有子组的元组</p><p>eg:</p><pre><code>&gt;&gt;&gt; import re&gt;&gt;&gt; reg = re.compile(r&quot;(\d\d\d)\+(\d\d\d\d)&quot;)&gt;&gt;&gt; match = reg.search(&quot;this is 345+7890&quot;)&gt;&gt;&gt; match.group(0)&apos;345+7890&apos;&gt;&gt;&gt; match.group(1)&apos;345&apos;&gt;&gt;&gt; match.group(2)&apos;7890&apos;&gt;&gt;&gt; match.groups()(&apos;345&apos;, &apos;7890&apos;)&gt;&gt;&gt; type(match)&lt;class &apos;_sre.SRE_Match&apos;&gt;</code></pre><h4 id="6-常见的pattern中匹配的通配字符的含义"><a href="#6-常见的pattern中匹配的通配字符的含义" class="headerlink" title="6.常见的pattern中匹配的通配字符的含义"></a>6.常见的pattern中匹配的通配字符的含义</h4><p>(注：若想让通配符表示其原有的含义，需使用 \ 转义)</p><ul><li>* 星号之前的分组，可以在文本中出现任意次。它可以完全不存在，或一次又一次地重复</li><li>? 匹配问号之前的分组零次或一次</li><li>+（加号）匹配一次或多次</li><li>\d 0 到 9 的任何数字 </li><li>\D 除 0 到 9 的数字以外的任何字符 </li><li>\w 任何字母、数字或下划线字符（可以认为是匹配“单词”字符） </li><li>\W 除字母、数字和下划线以外的任何字符 \s 空格、制表符或换行符（可以认为是匹配“空白”字符） </li><li>\S 除空格、制表符和换行符以外的任何字符 </li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>1.导入re</li><li>2.使用re.compile()创建一个regex对象</li><li>3.使用regex对象相关方法去匹配string,返回一个match对象</li><li>4.调用match对象的方法，返回匹配文本的字符串</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;regex用于匹配相应的类型，通常用于对于文本中的字符进行匹配和提取,以下只介绍python re模块的常见方法和regex的常见通配符&lt;/p&gt;
&lt;h3 id=&quot;python-re库&quot;&gt;&lt;a href=&quot;#python-re库&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="python" scheme="https://life0sfc.github.io/categories/python/"/>
    
    
      <category term="正则表达式" scheme="https://life0sfc.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="python" scheme="https://life0sfc.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>gdb的使用</title>
    <link href="https://life0sfc.github.io/2019/02/03/gdb%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://life0sfc.github.io/2019/02/03/gdb的使用/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:55:51.971Z</updated>
    
    <content type="html"><![CDATA[<p>gdb是linux下动态调试的工具，常见的动态调试工具主要有以下几个内容，我将结合gdb的命令进行介绍</p><h4 id="1、启动"><a href="#1、启动" class="headerlink" title="1、启动"></a>1、启动</h4><pre><code>start</code></pre><h4 id="2、断点"><a href="#2、断点" class="headerlink" title="2、断点"></a>2、断点</h4><pre><code>b *地址b 符号名    break &lt;function&gt; 在函数体入口处下断点。</code></pre><h4 id="3、单步"><a href="#3、单步" class="headerlink" title="3、单步"></a>3、单步</h4><pre><code>si: step in源码单步：next</code></pre><h4 id="4、查看内存"><a href="#4、查看内存" class="headerlink" title="4、查看内存"></a>4、查看内存</h4><pre><code>x/[]i 对指定数量的指令进行反汇编x/[]x 显示指定长度的数据   $rax  x/[]s以字符串形式显示数据</code></pre><p><code>x/10w $esp</code> 相当于显示栈上40B的数据，即栈上10个空间的数据</p><p>除了以上常见的四点外，gdb的常见命令还有</p><ul><li>set命令，常见的是set architecture，设置使用intel还是AT&amp;T语法，更多可使用help set查看</li><li>bt (backtrace)：打印出回溯的所有栈</li><li>disas反汇编命令，直接disas是反汇编当前函数<ul><li>disas /r      (显示汇编指令对应十六进制值)</li><li>disas /m      (如果有源码，显示对应行源码)</li></ul></li><li>help命令，以上的命令都可以查到相关说明</li></ul><p>相关插件<br>peda:<a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a><br>libheap:<a href="https://github.com/cloudburst/libheap" target="_blank" rel="noopener">https://github.com/cloudburst/libheap</a><br>以上只是一下gdb常见命令，更多可用help命令去查看，目前只想到这些，以后在补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gdb是linux下动态调试的工具，常见的动态调试工具主要有以下几个内容，我将结合gdb的命令进行介绍&lt;/p&gt;
&lt;h4 id=&quot;1、启动&quot;&gt;&lt;a href=&quot;#1、启动&quot; class=&quot;headerlink&quot; title=&quot;1、启动&quot;&gt;&lt;/a&gt;1、启动&lt;/h4&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="tools" scheme="https://life0sfc.github.io/categories/tools/"/>
    
    
      <category term="gdb" scheme="https://life0sfc.github.io/tags/gdb/"/>
    
      <category term="ctf" scheme="https://life0sfc.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>abexcrackme#2</title>
    <link href="https://life0sfc.github.io/2019/02/03/abexcrackme#2/"/>
    <id>https://life0sfc.github.io/2019/02/03/abexcrackme#2/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:55:51.970Z</updated>
    
    <content type="html"><![CDATA[<ul><li>实验环境：win xp32位虚拟机</li><li>程序：abexcrackme#2</li><li>实验工具：od<h4 id="破解程序"><a href="#破解程序" class="headerlink" title="破解程序"></a>破解程序</h4></li></ul><p>首先我们先观察一下程序的特征</p><p><img src="https://i.imgur.com/56MoLwG.png" alt=""></p><p>需要输入Name 和 Serial，检验后弹出正确的窗口<br>测试一下</p><p><img src="https://i.imgur.com/sP9pljo.png" alt=""></p><p>使用peid查看发现是VB程序，<br>用od打开</p><p><img src="https://i.imgur.com/rgn6rDv.png" alt=""></p><p>右键–&gt;Search for–&gt;All referenced text strings查看所有字符串<br>找到</p><p><img src="https://i.imgur.com/MgmnP1B.png" alt=""></p><p>进入字符串Congratulation!发现</p><p><img src="https://i.imgur.com/KhZJ3OX.png" alt=""><br>先是移动相关的字符串，然后调用消息框的代码04033BE</p><p>向上观察发现汇编代码中先压入了edx,eax然后call调用了函数，再执行test和je指令<br><img src="https://i.imgur.com/OhHyBDQ.png" alt=""><br>在32位的程序中函数调用时会将参数压入栈中，所以判断call调用的函数是判断字符串是否相等，可以在403321处下断点（F2）在重新开始程序（ctrl+f2），按F9运行程序，观察程序的运行，输入Name,Serial，这里设为123456，abcsdf，程序停在了403321处</p><p>在403329处下断点，按F9继续运行，查看edx,eax值</p><p><img src="https://i.imgur.com/hWQQCbe.png" alt=""></p><p>查看0012F4D4，0012F4C4存储在栈中的内存地址（选定地址–&gt;右键–&gt;Follow in dump）</p><p><img src="https://i.imgur.com/Qq85WlR.png" alt=""><br>此16个字节不是直接显示的字符串，可以使用在dump窗口long-&gt;Address with ASCII dump命令查看</p><p><img src="https://i.imgur.com/pTDoPqn.png" alt=""> </p><p>查看0012F4D4，0012F4C4在栈窗口中的值（Follow in stack）</p><p><img src="https://i.imgur.com/jYTS9Re.png" alt=""></p><p>可以发现eax为用户输入的Serial（VB使用unicode编码），而edx为实际的Serial值</p><p><img src="https://i.imgur.com/ZjjQvEc.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;实验环境：win xp32位虚拟机&lt;/li&gt;
&lt;li&gt;程序：abexcrackme#2&lt;/li&gt;
&lt;li&gt;实验工具：od&lt;h4 id=&quot;破解程序&quot;&gt;&lt;a href=&quot;#破解程序&quot; class=&quot;headerlink&quot; title=&quot;破解程序&quot;&gt;&lt;/a&gt;破解程序&lt;
      
    
    </summary>
    
      <category term="reverse" scheme="https://life0sfc.github.io/categories/reverse/"/>
    
    
      <category term="reverse" scheme="https://life0sfc.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>逆向题--逆向找出正确的flagre2</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E9%80%86%E5%90%91%E9%A2%98--%E9%80%86%E5%90%91%E6%89%BE%E5%87%BA%E6%AD%A3%E7%A1%AE%E7%9A%84flagre2/"/>
    <id>https://life0sfc.github.io/2019/02/03/逆向题--逆向找出正确的flagre2/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:38:17.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目：逆向找出正确的flagre2"><a href="#题目：逆向找出正确的flagre2" class="headerlink" title="题目：逆向找出正确的flagre2"></a>题目：<a href="https://pan.baidu.com/s/1uDEQ0gRUxHETYd_u9M2ghQ" target="_blank" rel="noopener">逆向找出正确的flagre2</a></h4><p>先检查一下<br><img src="https://i.imgur.com/PtuW1uK.png" alt=""><br>没壳，32位的程序</p><p>直接ida分析，查看伪c<br><img src="https://i.imgur.com/dKgCXwO.png" alt=""></p><p>先是输入input,经过sub_401032()函数，在下面是一个循环，循环内看不太懂，看下程序内的字符串，只发现<code>Try again!</code>，没有看到显示成功的字符串，一步一步分析吧！</p><p>进入sub_401032()函数观察<br><img src="https://i.imgur.com/soVffuk.png" alt=""><br>发现进行了异或运算<code>401100h^95h^input的第一个字符</code>，<br>得出return值的范围为<code>401100h~4011FFh</code><br>查看汇编代码</p><p><img src="https://i.imgur.com/cJprtgR.png" alt=""></p><ul><li>1 中将eax放入<code>[ebp+var_1C]</code></li><li>2 与0进行比较，执行后zf=0,不发生跳转</li><li>3 call addr,addr范围为<code>401100h~4011FFh</code></li></ul><p>观察<code>401100h~4011FFh</code>范围内的函数，发现ida没有识别出来，直接create function,<code>sub_401100() sub_401160() sub_4011C0()</code></p><p><img src="https://i.imgur.com/usT4oTV.png" alt=""></p><p><img src="https://i.imgur.com/14BBSUt.png" alt=""></p><p><img src="https://i.imgur.com/jWccMih.png" alt=""></p><p>00h^95h=149</p><p>60h^95h=245</p><p>c0h^95h=85</p><p>这里只有85小于ffh,所以会执行sub_4011C0()函数，打印出<code>o</code>字符，从输入的字符串中去第二个字符，分别于0x8f和^0x401200,范围为<code>0x401200~0x4012ff</code>,与上一次的情况相似，也是三个函数<br><img src="https://i.imgur.com/kMAqdUe.png" alt=""><br><img src="https://i.imgur.com/tUS455v.png" alt=""><br><img src="https://i.imgur.com/e74pipH.png" alt=""></p><p>推测应该是<code>n</code>,我们可以在下面的图中看到字符的引用，可以看到<code>Try again!</code></p><p><img src="https://i.imgur.com/FEsa7AU.png" alt=""><br>这一题的基本逻辑就出来了，输入字符串，取每一位与下面图中数据异或，决定下一个执行的函数并打印出相应的字符。</p><p><img src="https://i.imgur.com/L7Z8yJQ.png" alt=""><br>多次尝试，发现打印字符串应为<code>Congratulate</code>,推出输入的<code>input</code></p><p><img src="https://i.imgur.com/i14WGuZ.png" alt=""></p><p>在这题中ida的伪C代码会让人看不懂，还是直接通过看汇编代码去分析，对于不清晰的指令结合od去做判断。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目：逆向找出正确的flagre2&quot;&gt;&lt;a href=&quot;#题目：逆向找出正确的flagre2&quot; class=&quot;headerlink&quot; title=&quot;题目：逆向找出正确的flagre2&quot;&gt;&lt;/a&gt;题目：&lt;a href=&quot;https://pan.baidu.com/s
      
    
    </summary>
    
      <category term="ctf" scheme="https://life0sfc.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://life0sfc.github.io/tags/ctf/"/>
    
      <category term="reverse" scheme="https://life0sfc.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个blog</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAblog/"/>
    <id>https://life0sfc.github.io/2019/02/03/搭建一个blog/</id>
    <published>2019-02-03T08:56:47.001Z</published>
    <updated>2019-02-03T08:56:05.798Z</updated>
    
    <content type="html"><![CDATA[<p>我是在windows下使用hexo来搭建blog的，hexo是一款简单、快速的博客框架，可以用来写<code>markdown</code>文件的博客</p><h4 id="一、安装git和nodejs"><a href="#一、安装git和nodejs" class="headerlink" title="一、安装git和nodejs"></a>一、安装git和nodejs</h4><p>git是一种分布式版本控制系统，我们搭建的<code>blog</code>要用到github，使用<br><code>username.github.io</code>为域名。<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a> 选择合适的版本下载并安装，安装完成后，右键会有关于git的两个按键</p><p>nodejs是运行在服务端的<code>JavaScript</code>,<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载地址</a>选择合适的版本下载并安装</p><h4 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h4><p>在你合适的地方新建一个<code>hexo</code>文件夹用于安装hexo，这里我选择在E盘下，在hexo文件夹中，打开git的命令行</p><pre><code>npm install -g hexo-cli    #-g 表示全局安装hexo init                  #初始化hexo install               #安装依赖</code></pre><p>本地测试</p><pre><code>hexo g   //生成文件,和更新类似hexo s  //本地启动，可在http://localhost:4000/本地访问博客</code></pre><p>在生成以及部署文章之前，需要安装一个扩展：<code>npm install hexo-deployer-git --save</code></p><p><img src="https://i.imgur.com/HeIJKGb.png" alt=""></p><ul><li><code>themes</code>文件夹稍后可以安装适合自己的主题</li><li><p><code>_config.yml</code>在文件中可修改配置文件<br><img src="https://i.imgur.com/LiYPDoY.png" alt=""></p></li><li><p><code>_post</code>文件夹中添加你写的md格式的博客</p></li></ul><h4 id="三、生成SSH并添加到github"><a href="#三、生成SSH并添加到github" class="headerlink" title="三、生成SSH并添加到github"></a>三、生成SSH并添加到github</h4><p>先在Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io。并且需要勾选Initialize this repository with a README<br><img src="https://i.imgur.com/TocS67e.png" alt=""><br>现在我们可以发现可以访问https://{username}.github.io/了<br>对本地的<code>hexo博客根目录\_config.yml</code>进行修改，添加如下内容</p><pre><code>deploy:   type: git  repository: https://github.com/life0sfc/life0sfc.github.io.git  branch: master</code></pre><p>将Hexo与Github page联系起来，设置Git的username和email</p><pre><code>$ git config --global user.name &quot;your name&quot;  $ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre><p>创建ssh密钥</p><pre><code>ssh-keygen -t rsa -C “your_email@youremail.com”</code></pre><p>会在~/.ssh文件夹中产生密钥文件<br><img src="https://i.imgur.com/Gg6thGN.png" alt=""></p><p>登录Github，点击头像下的settings，添加ssh，id_rsa.pub文件里的内容复制上去<br><img src="https://i.imgur.com/Y3DgM7M.png" alt=""><br>输入<code>ssh -T git@github.com</code>，测试添加ssh是否成功<br><img src="https://i.imgur.com/A6WxNeZ.png" alt=""><br>可以看到已经成功了</p><p>在Hexo博客根目录<br><img src="https://i.imgur.com/VUDRrdJ.png" alt=""><br>上传到github上<br><img src="https://i.imgur.com/wsSkS5p.png" alt=""></p><h4 id="四、优化你的博客"><a href="#四、优化你的博客" class="headerlink" title="四、优化你的博客"></a>四、优化你的博客</h4><h5 id="4-1、更改博客主题"><a href="#4-1、更改博客主题" class="headerlink" title="4.1、更改博客主题"></a>4.1、更改博客主题</h5><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>在<code>_config.yml</code>(这是在Hexo博客根目录下的文件)中将<code>theme: landscape</code>改成<code>theme: next</code></p><h5 id="4-2添加RSS"><a href="#4-2添加RSS" class="headerlink" title="4.2添加RSS"></a>4.2添加RSS</h5><p>在hexo根目录打开git bash，安装插件：</p><pre><code>npm install --save hexo-generator-feed</code></pre><p>修改<code>hexo博客根目录\_config.yml</code>文件，添加</p><pre><code>feed: # RSS订阅插件  type: atom  path: atom.xml  limit: 0plugins: hexo-generate-feed</code></pre><p>修改<code>hexo博客根目录\themes\next\_config.yml</code>（这是主题配置文件）文件，添加</p><pre><code>rss: /atom.xml</code></pre><h5 id="4-3-杂"><a href="#4-3-杂" class="headerlink" title="4.3 杂"></a>4.3 杂</h5><p><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">统计阅读次数</a></p><p>添加菜单选项</p><pre><code>hexo new page &quot;categories&quot;   // 添加分类页面hexo new page &quot;tags&quot;    // 添加标签页面hexo new page &quot;about&quot;     // 添加关于页面</code></pre><p><img src="https://i.imgur.com/8bB7JNv.png" alt=""></p><p>新建一篇博客，在cmd执行命令：hexo new post “博客名”</p><p>参考链接</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33616481" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33616481</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是在windows下使用hexo来搭建blog的，hexo是一款简单、快速的博客框架，可以用来写&lt;code&gt;markdown&lt;/code&gt;文件的博客&lt;/p&gt;
&lt;h4 id=&quot;一、安装git和nodejs&quot;&gt;&lt;a href=&quot;#一、安装git和nodejs&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="杂" scheme="https://life0sfc.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>helloword</title>
    <link href="https://life0sfc.github.io/2019/02/03/helloword/"/>
    <id>https://life0sfc.github.io/2019/02/03/helloword/</id>
    <published>2019-02-03T08:30:06.000Z</published>
    <updated>2019-02-03T08:59:46.108Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h4><p>博客搭建好了，记录所学（可能会很杂），提高自己。<br>立个flag: 每周至少更新一篇，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Helloworld&quot;&gt;&lt;a href=&quot;#Helloworld&quot; class=&quot;headerlink&quot; title=&quot;Helloworld&quot;&gt;&lt;/a&gt;Helloworld&lt;/h4&gt;&lt;p&gt;博客搭建好了，记录所学（可能会很杂），提高自己。&lt;br&gt;立个flag: 每周
      
    
    </summary>
    
    
      <category term="小记" scheme="https://life0sfc.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
