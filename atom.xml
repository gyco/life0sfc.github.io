<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>life0sfc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://life0sfc.github.io/"/>
  <updated>2019-02-17T06:15:24.990Z</updated>
  <id>https://life0sfc.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python总结（一）</title>
    <link href="https://life0sfc.github.io/2019/02/17/python%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://life0sfc.github.io/2019/02/17/python总结（一）/</id>
    <published>2019-02-17T05:30:11.000Z</published>
    <updated>2019-02-17T06:15:24.990Z</updated>
    
    <content type="html"><![CDATA[<p>这是我在学习<code>python</code>的过程中做的一些笔记，对一些我觉得学习过程中不太容易理解的概念，不太成体系，见谅！</p><h5 id="1、python命令行"><a href="#1、python命令行" class="headerlink" title="1、python命令行"></a>1、python命令行</h5><pre><code>python -hpython -c cmd : program passed in as string (terminates option list)python -m mod :  run library module as a script (terminates option list)</code></pre><p>python一句话实现软件hash校验(来自余弦大大的<code>懒人在思考</code>)</p><pre><code>MD5python -c &quot;import hashlib,sys;print hashlib.md5(open(sys.argv[1],&apos;rb&apos;).read()).hexdigest()&quot; Shadowsocks.exeSHA-1python -c &quot;import hashlib,sys;print hashlib.sha1(open(sys.argv[1],&apos;rb&apos;).read()).hexdigest()&quot; Shadowsocks.exeSHA-256python -c &quot;import hashlib,sys;print hashlib.sha256(open(sys.argv[1],&apos;rb&apos;).read()).hexdigest()&quot; Shadowsocks.exeSHA-512python -c &quot;import hashlib,sys;print hashlib.sha512(open(sys.argv[1],&apos;rb&apos;).read()).hexdigest()&quot; Shadowsocks.exe</code></pre><h5 id="2、python方法"><a href="#2、python方法" class="headerlink" title="2、python方法"></a>2、python方法</h5><p>Python ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。</p><pre><code>pow(x,y)   x的y次方pow(x,y,z)  x的y次方模ztype()dis()</code></pre><h5 id="3、字符串-lt-gt-list"><a href="#3、字符串-lt-gt-list" class="headerlink" title="3、字符串&lt;==&gt;list"></a>3、字符串&lt;==&gt;list</h5><p>python 中字符串是不可更改的，list可以，两者互换的方法如下</p><pre><code>&gt;&gt;&gt; key = &quot;helloworld&quot;&gt;&gt;&gt; list = list(key)&gt;&gt;&gt; list[&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;w&apos;, &apos;o&apos;, &apos;r&apos;, &apos;l&apos;, &apos;d&apos;]&gt;&gt;&gt; str = &quot;&quot;.join(list)&gt;&gt;&gt; str&apos;helloworld&apos;</code></pre><h5 id="4、使用virtualenv和virtualenvwrapper"><a href="#4、使用virtualenv和virtualenvwrapper" class="headerlink" title="4、使用virtualenv和virtualenvwrapper"></a>4、使用virtualenv和virtualenvwrapper</h5><p>python虚拟环境安装</p><pre><code>sudo pip install virtualenv</code></pre><p>安装后:<br>a.创建目录用来存放虚拟环境</p><pre><code>mkdir $HOME/.virtualenvs</code></pre><p>b.在~/.bashrc中添加行：</p><pre><code>export WORKON_HOME=$HOME/.virtualenvsfind / -name virtualenvwrapper.sh #找到virtualenvwrapper.sh的路径source 路径 #激活virtualenvwrapper.shsource /usr/local/bin/virtualenvwrapper.sh</code></pre><p>b.运行:</p><pre><code>source ~/.bashrc创建python虚拟环境mkvirtualenv [虚拟环境名称]workon [虚拟环境名称]退出虚拟环境 离开 deactivate删除(慎用)rmvirtualenv [虚拟环境名称]$ virtualenv flaskNew python executable in flask/bin/pythonInstalling setuptools............................done.Installing pip...................done.$ flask/bin/pip install flask#!flask/bin/pythonfrom flask import Flaskapp = Flask(__name__)@app.route(&apos;/&apos;)def index():    return &quot;Hello, World!&quot;if __name__ == &apos;__main__&apos;:    app.run(debug=True)</code></pre><h5 id="5、if-for常规和推导式写法"><a href="#5、if-for常规和推导式写法" class="headerlink" title="5、if/for常规和推导式写法"></a>5、if/for常规和推导式写法</h5><h6 id="5-1、if"><a href="#5-1、if" class="headerlink" title="5.1、if"></a>5.1、if</h6><p>常规：</p><pre><code>if a&gt;b:    c = aelse:    c = b</code></pre><p>表达式：<br><code>c = a if a&gt;b else b</code></p><p>二维列表： <code>c = [b,a][a&gt;b]</code></p><h6 id="5-2、for"><a href="#5-2、for" class="headerlink" title="5.2、for"></a>5.2、for</h6><pre><code>列表推导式[对(x)的操作 for x in 集合 if 条件][对(x,y)的操作 for x in 集合1 for y in 集合2 if 条件]&gt;&gt;&gt;a = []&gt;&gt;&gt; for i in range(10):...     if i%2 == 0:...             a.append(i)...&gt;&gt;&gt; a[0, 2, 4, 6, 8]&gt;&gt;&gt; b = [i for i in range(10) if i%2 ==0]&gt;&gt;&gt; b[0, 2, 4, 6, 8]字典推导式&gt;&gt;&gt; a = {}&gt;&gt;&gt; for i in range(10):...     if i%2 == 0:...             a[i] = i*i...&gt;&gt;&gt; a{0: 0, 2: 4, 4: 16, 6: 36, 8: 64}&gt;&gt;&gt; b = {i:i*i for i in range(10) if i%2 == 0}&gt;&gt;&gt; b{0: 0, 2: 4, 4: 16, 6: 36, 8: 64}</code></pre><h5 id="6、python异常处理"><a href="#6、python异常处理" class="headerlink" title="6、python异常处理"></a>6、python异常处理</h5><pre><code>try...exceptraise 引发一个异常raise ValueError(&apos;Invalid URL&apos;)try ...finally</code></pre><h5 id="7、python格式字符串"><a href="#7、python格式字符串" class="headerlink" title="7、python格式字符串"></a>7、python格式字符串</h5><pre><code>1、%-formatting2、str.format()&quot;hello {}.&quot;.format(world)3、print(f&apos;{last_block}&apos;)&gt;&gt;&gt; print(&quot;hello %s !&quot; % (&quot;world&quot;))hello world !&gt;&gt;&gt; print(&quot;hello{}!&quot;.format(&quot;world&quot;))helloworld!&gt;&gt;&gt; i= &quot;world&quot;&gt;&gt;&gt; print(f&quot;hello{i}!&quot;)helloworld!</code></pre><blockquote><p><a href="https://www.cnblogs.com/c-x-a/p/9333826.html" target="_blank" rel="noopener">https://www.cnblogs.com/c-x-a/p/9333826.html</a></p></blockquote><h4 id="8、python函数"><a href="#8、python函数" class="headerlink" title="8、python函数"></a>8、python函数</h4><h6 id="8-1、python内建函数（即python自带的函数）"><a href="#8-1、python内建函数（即python自带的函数）" class="headerlink" title="8.1、python内建函数（即python自带的函数）"></a>8.1、python内建函数（即python自带的函数）</h6><p>常见的内置函数</p><pre><code>filter()      //可直接在python命令行中，使用`help(filter)`查看用法map()reduce()zip()staticmethod()property() 函数的作用是在新式类中返回属性值。</code></pre><h6 id="8-2、函数参数"><a href="#8-2、函数参数" class="headerlink" title="8.2、函数参数"></a>8.2、函数参数</h6><p>函数传参时，如不按参数指定的顺序传参，需指定参数的关键字</p><pre><code>&gt;&gt;&gt; def fuct1(first,second,third):    //参数前加* 表示参数可选...     print(&quot;first=%d&quot; % first)...     print(&quot;second=%d&quot; % second)...     print(&quot;third=%d&quot; % third)...&gt;&gt;&gt; fuct1(1,2,3)first=1second=2third=3&gt;&gt;&gt; fuct1(1,third=2,second=3)first=1second=3third=2</code></pre><p>如果是函数定义中参数前的 *表示的是将调用时的多个参数放入元组中,**则表示将调用函数时的关键字参数放入一个字典中<br>如定义以下函数</p><pre><code>def func(*args):    print(args)</code></pre><p>当用func(1,2,3)调用函数时,参数args就是元组(1,2,3)<br>定义以下函数</p><pre><code>def func(**args):    print(args)</code></pre><p>当用func(a=1,b=2)调用函数时,参数args将会是字典{‘a’:1,’b’:2}</p><h4 id="9、python-读文件"><a href="#9、python-读文件" class="headerlink" title="9、python 读文件"></a>9、python 读文件</h4><pre><code>with open(&quot;path+file.js&quot; ,&quot;r&quot;) as topo:python path+file.py   </code></pre><h5 id="10、python闭包"><a href="#10、python闭包" class="headerlink" title="10、python闭包"></a>10、python闭包</h5><pre><code>def sum(a):    def add(b):        return a+b    return add# add 函数名称# add() 函数的调用num = sum(1)&gt;&gt;&gt;print(num(2)) 3&gt;&gt;&gt;type(num)&lt;class &apos;function&apos;&gt;</code></pre><p>内部的函数用到外部函数的变量，并且外部函数返回内部函数名称。传递函数</p><h5 id="11、python装饰器（修饰函数的作用）"><a href="#11、python装饰器（修饰函数的作用）" class="headerlink" title="11、python装饰器（修饰函数的作用）"></a>11、python装饰器（修饰函数的作用）</h5><p>‘@’ 用做函数的修饰符，可以在模块或者类的定义层内对函数进行修饰，<br>一个修饰符就是一个函数，它将被修饰的函数作为参数，并返回修饰后的同名函数或其他可调用的东西</p><p>装饰器的语法以@开头，接着是装饰器函数的名字和可选的参数。紧跟着装饰器声明的是被 修饰的函数和装饰函数的可选参数。</p><h5 id="12、python浅拷贝和深拷贝"><a href="#12、python浅拷贝和深拷贝" class="headerlink" title="12、python浅拷贝和深拷贝"></a>12、python浅拷贝和深拷贝</h5><pre><code>import copyi = copy.copy(c)j = copy.deepcopy(c)</code></pre><ul><li>浅拷贝即是指创建一个新的对象，其内容是原对象中元素的引用。</li><li>深拷贝”是指创建一个新的对象，然后递归的拷贝原对象所包含的子对象。深拷贝出来的 对象与原对象没有任何关联。</li></ul><h5 id="13、其他"><a href="#13、其他" class="headerlink" title="13、其他"></a>13、其他</h5><h6 id="13-1、is和-的区别"><a href="#13-1、is和-的区别" class="headerlink" title="13.1、is和==的区别"></a>13.1、is和==的区别</h6><p>== 用来检查两个对象是否相等,而 is 用来检查两个对象是否相同(是同一个对象)</p><h6 id="13-2、python中SimpleHTTPServer"><a href="#13-2、python中SimpleHTTPServer" class="headerlink" title="13.2、python中SimpleHTTPServer"></a>13.2、python中SimpleHTTPServer</h6><p>快速搭建一个http服务，提供一个文件浏览的web服务。</p><pre><code>python -m SimpleHTTPServer 80     //把当前目录发布到8000端口python -m SimpleHTTPServer 80 &amp;    //最后加一个 &amp; ，则该命令产生的进程在后台运行</code></pre><h6 id="13-4、pep8规范"><a href="#13-4、pep8规范" class="headerlink" title="13.4、pep8规范"></a>13.4、pep8规范</h6><p>自动化<code>pep8</code>工具<code>autopep8</code></p><pre><code>pip install autopep8</code></pre><p><a href="https://blog.csdn.net/qq_41996090/article/details/84196471" target="_blank" rel="noopener">https://blog.csdn.net/qq_41996090/article/details/84196471</a></p><h6 id="13-5、安装Python-3-6-在Ubuntu-16-04-LTS-版本"><a href="#13-5、安装Python-3-6-在Ubuntu-16-04-LTS-版本" class="headerlink" title="13.5、安装Python 3.6 在Ubuntu 16.04 LTS 版本"></a>13.5、安装Python 3.6 在Ubuntu 16.04 LTS 版本</h6><p>运行下面的命令来安装 Python 3.6：</p><pre><code># wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz# tar xJf Python-3.6.0.tar.xz# cd Python-3.6.0# ./configure# make &amp;&amp; make install</code></pre><blockquote><p><a href="https://blog.csdn.net/lzzyok/article/details/77413968" target="_blank" rel="noopener">https://blog.csdn.net/lzzyok/article/details/77413968</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我在学习&lt;code&gt;python&lt;/code&gt;的过程中做的一些笔记，对一些我觉得学习过程中不太容易理解的概念，不太成体系，见谅！&lt;/p&gt;
&lt;h5 id=&quot;1、python命令行&quot;&gt;&lt;a href=&quot;#1、python命令行&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="python" scheme="https://life0sfc.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://life0sfc.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初入blockchain</title>
    <link href="https://life0sfc.github.io/2019/02/08/%E5%88%9D%E5%85%A5blockchain/"/>
    <id>https://life0sfc.github.io/2019/02/08/初入blockchain/</id>
    <published>2019-02-08T12:26:19.000Z</published>
    <updated>2019-02-09T12:15:51.306Z</updated>
    
    <content type="html"><![CDATA[<p>早就听说过区块链这个技术的威名，于是不知天高低后的想去申请做一个区块链的项目，但真正接触起来才发现，这对我来说是一个挑战，但既然当初不知天高低后的吹了出去，就只有努力填坑喽！写几遍blog记录我的所学，分享出来，共同进步！</p><h4 id="一、区块链"><a href="#一、区块链" class="headerlink" title="一、区块链"></a>一、区块链</h4><h5 id="1-1、去中心化应用-DApp"><a href="#1-1、去中心化应用-DApp" class="headerlink" title="1.1、去中心化应用(DApp)"></a>1.1、去中心化应用(DApp)</h5><p>它是一种网络应用，后端在去中心化的点对点网络上运行，且其源代码是开源的。不存在有完全能够控制DApp的节点。</p><ul><li>分布式应用：将应用分布在多个服务器上</li><li>账本–是一种只可增加的交易列表</li><li>区块链–创建去中心化账本的数据结构，用于储存数据</li></ul><p>bitcoin白皮书 <a href="https://bitcoin.org/en/bitcoin-paper" target="_blank" rel="noopener">https://bitcoin.org/en/bitcoin-paper</a></p><h5 id="1-2、几个常见的概念"><a href="#1-2、几个常见的概念" class="headerlink" title="1.2、几个常见的概念"></a>1.2、几个常见的概念</h5><ul><li>公有链、联盟链和私有链 <ul><li>公有链（Public Blockchain）：世界上所有人都可以发送交易，具有高度的去中心化，读写权限对所有人开放（如比特币）。</li><li>联盟链（Consortium Blockchain）：介于公有链和私有链直接，实现了“部分去中心化”，读写权限对加入联盟的节点开放。</li><li>私有链（Private Blockchain）：整个网络由某个组织完全控制，参与的节点具有严格的限制且少。</li></ul></li></ul><p>可以看出三种链的去中心化程度是由高到底的，公有链最高</p><ul><li>记账模式<ul><li>UTXO 是“unspent transaction input/output”的缩写，指“未花费的交易输入输出”，是区块链网络中的一种记账模式，主要应用在比特币系的数字货币中，它记录的是交易事件，而不是记录最终状态.</li><li>账户模式即账户余额模式，主要应用于智能合约中。</li></ul></li><li>区块链共识算法<ul><li>PoW:通过计算资源（又称算力）来决定记账权。</li><li>PoS:通过拥有又权力的大小来决定记账权。</li><li>DPoS:Delegated Proof of Stake 代理权益证明</li></ul></li></ul><h4 id="二、以太坊-ethereum"><a href="#二、以太坊-ethereum" class="headerlink" title="二、以太坊(ethereum)"></a>二、以太坊(ethereum)</h4><h5 id="2-1、什么是以太坊"><a href="#2-1、什么是以太坊" class="headerlink" title="2.1、什么是以太坊"></a>2.1、什么是以太坊</h5><p>是一个去中心化的平台，可以在其上运行使用智能合约编写的DApp</p><p>以太坊的白皮书</p><blockquote><p><a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/White-Paper</a></p></blockquote><p>以太坊虚拟机（EVM）可执行任意复杂算法的编码，使以太坊是“图灵完备的”</p><h5 id="2-2、以太坊的几个基本概念"><a href="#2-2、以太坊的几个基本概念" class="headerlink" title="2.2、以太坊的几个基本概念"></a>2.2、以太坊的几个基本概念</h5><ul><li>账户：每个账户都有一对密钥来定义，账户以地址为索引，地址为公钥的后20个字节<ul><li>外部账户（EOA,externally owned accounts）:由私人密钥控制，具有以太币的状态（即人用的账户）</li><li>合约账户(CA,contracts accounts)：由合约代码控制（即智能合约用的账户），且只能由外部账户激活</li></ul></li><li>交易： EOA 账户将一个经过签名的数据包发送到另外一个账户的过程，这个过程产生的账户状态变化将被存储到以太坊区块链上。</li><li>消息：一个合约账户调用其他合约账户的过程。</li><li>EVM:以太坊虚拟机，用来执行以太坊智能合约字节码（类似于java的jvm）</li><li>gas:是执行智能合约操作的燃料，智能合约的每一个步骤都会消耗 gas,gas是由以太坊的平台代币以太币转化而来</li></ul><h5 id="2-3、搭建以太坊开发环境"><a href="#2-3、搭建以太坊开发环境" class="headerlink" title="2.3、搭建以太坊开发环境"></a>2.3、搭建以太坊开发环境</h5><p>geth(go-ethereum)为以太坊的go语言客户端,geth官方安装指南：</p><blockquote><p><a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum</a></p></blockquote><p>创建一个账户</p><pre><code>geth account new  //会让你输入pw,由于账户没有找回密码的选项，请务必记住密码或者使用geth --password ./password account newgeth account list   //列出keystore文件夹中所有账号</code></pre><p>密钥文件在：~/.ethereum/keystore/中<br>Geth Console一个交互式的 JavaScript 执行环境</p><pre><code>geth console 2&gt;&gt; file_to_log_output  //进入交互式并输出日志&gt; eth.accounts   //列出账号[&quot;0x87c9207d37e9cc2ee8bae158ea922b131f5f6edb&quot;]&gt;personal.newAccount(&quot;password&quot;)tail -f file_to_log_output //查看日志</code></pre><ul><li>eth：包含一些跟操作区块链相关的方法</li><li>net：包含以下查看p2p网络状态的方法</li><li>admin：包含一些与管理节点相关的方法</li><li>miner：包含启动&amp;停止挖矿的一些方法</li><li>personal：主要包含一些管理账户的方法</li><li>txpool：包含一些查看交易内存池的方法</li><li>web3：包含了以上对象，还包含一些单位换算的方法</li></ul><blockquote><p><a href="https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts</a></p></blockquote><p>Mist浏览器(已经集成以太坊钱包)</p><blockquote><p><a href="https://github.com/ethereum/mist/releases/" target="_blank" rel="noopener">https://github.com/ethereum/mist/releases/</a></p></blockquote><p>以太坊网络<br><a href="https://ethstats.net/" target="_blank" rel="noopener">https://ethstats.net/</a><br>中显示了以太坊网络中实时的数据</p><pre><code>&gt; net.listening  //显示是否在监听的节点true&gt; net.peerCount  //对等端点的数量0&gt; admin.peers  //返回已连接的对等端点的列表&gt; admin.nodeInfo</code></pre><h5 id="2-4、编写智能合约"><a href="#2-4、编写智能合约" class="headerlink" title="2.4、编写智能合约"></a>2.4、编写智能合约</h5><p>通过编写智能合约，我们可以让以太坊网络执行我们所设定的内容，我将采用<code>solidity</code>这门语言来编写合约代码（这门语言与<code>javascript</code>很像），当然<code>EVM</code>其实支持多种语言，不过主流是<code>solidity</code>，编写出来的文件是以<code>.sol</code>为后缀的，编写完成后编译成为字节码供<code>EVM</code>执行</p><p>solidity官方文档：<a href="https://solidity.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/latest/</a></p><p>安装<code>solidity</code>编译器<br>官网中提供了多种安装方法，这里采用二进制包来安装</p><pre><code>sudo add-apt-repository ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install solc</code></pre><p>安装成功后，输入<code>solc --help</code>可查看相应的选项<br>除了这种方法外，常见的是使用以太坊提供的<code>Browser Solidity</code>一种在浏览器上的适用于小型合约的IDE，<code>solidity</code>官方文档中推荐使用<code>Remix</code></p><blockquote><p><a href="https://github.com/ethereum/remix-ide/" target="_blank" rel="noopener">https://github.com/ethereum/remix-ide/</a></p></blockquote><p><code>Remix</code>提供两种方式</p><ul><li>直接通过浏览器访问<a href="https://ethereum.github.io/browser-solidity/进行在线编写" target="_blank" rel="noopener">https://ethereum.github.io/browser-solidity/进行在线编写</a></li><li>本地安装</li></ul><p>首先要安装<code>npm</code>和<code>nodejs</code></p><pre><code>sudo apt-get install npmnpm install -g npm   //用于更新npmcurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash //下载并安装nvm用于安装nodejsexport NVM_DIR=&quot;${XDG_CONFIG_HOME/:-$HOME/.}nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  //导入nvm    nvm install nodenode -v</code></pre><p>nvm为nodejs的包管理器，Node.js 就是运行在服务端的<code>JavaScript</code>。</p><p>安装remix</p><pre><code>npm install remix-ide -gremix-ide</code></pre><p><img src="https://i.imgur.com/oXkvZvv.png" alt=""></p><p>浏览器打开<a href="http://127.0.0.1:8080，就可以开始编程了" target="_blank" rel="noopener">http://127.0.0.1:8080，就可以开始编程了</a></p><h4 id="三、区块链资源"><a href="#三、区块链资源" class="headerlink" title="三、区块链资源"></a>三、区块链资源</h4><blockquote><p><a href="https://mp.weixin.qq.com/s/1ZBdZfpYwqpe_Xbj0t3WOw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1ZBdZfpYwqpe_Xbj0t3WOw</a></p></blockquote><blockquote><p><a href="https://ethfans.org/" target="_blank" rel="noopener">https://ethfans.org/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早就听说过区块链这个技术的威名，于是不知天高低后的想去申请做一个区块链的项目，但真正接触起来才发现，这对我来说是一个挑战，但既然当初不知天高低后的吹了出去，就只有努力填坑喽！写几遍blog记录我的所学，分享出来，共同进步！&lt;/p&gt;
&lt;h4 id=&quot;一、区块链&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="blockchain" scheme="https://life0sfc.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="https://life0sfc.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://life0sfc.github.io/2019/02/03/正则表达式/</id>
    <published>2019-02-03T09:05:32.257Z</published>
    <updated>2019-02-04T15:41:34.560Z</updated>
    
    <content type="html"><![CDATA[<p>regex用于匹配相应的类型，通常用于对于文本中的字符进行匹配和提取,以下只介绍python re模块的常见方法和regex的常见通配符</p><h3 id="python-re库"><a href="#python-re库" class="headerlink" title="python re库"></a>python re库</h3><h5 id="1-re-compile-pattern-flags-0"><a href="#1-re-compile-pattern-flags-0" class="headerlink" title="1. re.compile(pattern, flags=0)"></a>1. re.compile(pattern, flags=0)</h5><p>编译一个正则表达式对象，在利用该对象去调用match()、search()等方法</p><pre><code>reg = re.compile(r&apos;\d\d\d-\d\d\d-\d\d\d\d&apos;)  //在字符串的第一个引号之前加上 r，可以将该字符串标记为原始字符串，它不包括转义字符</code></pre><h5 id="2-re-match-pattern-string"><a href="#2-re-match-pattern-string" class="headerlink" title="2. re.match(pattern, string)"></a>2. re.match(pattern, string)</h5><p>如果字符串开头的零个或多个字符与正则表达式模式匹配，则返回相应的匹配对象。</p><h5 id="3-re-search-pattern-string-flags-0"><a href="#3-re-search-pattern-string-flags-0" class="headerlink" title="3. re.search(pattern, string, flags=0)"></a>3. re.search(pattern, string, flags=0)</h5><p>查找传入的整个string，寻找该正则表达式的所有匹配。如果字符串中没有找到该正则表达式模式，search()方法将返回None。如果找到了该模式， search()方法将返回一个Match对像</p><h5 id="4-re-findall-pattern-string-flags-0"><a href="#4-re-findall-pattern-string-flags-0" class="headerlink" title="4. re.findall(pattern, string, flags=0)"></a>4. re.findall(pattern, string, flags=0)</h5><p>将返回一组字符串，包含被查找字符串中的所有匹配</p><h5 id="5-匹配分组"><a href="#5-匹配分组" class="headerlink" title="5. 匹配分组"></a>5. 匹配分组</h5><ul><li>(…)分组匹配括号内的正则表达式，执行匹配后可使用group()检索匹配内容</li><li>(){}花括号中为匹配()中分组的个数，为数字</li></ul><p>match对象调用group()方法，group(0)返回所有匹配的分组，groups()返回包含匹配的所有子组的元组</p><p>eg:</p><pre><code>&gt;&gt;&gt; import re&gt;&gt;&gt; reg = re.compile(r&quot;(\d\d\d)\+(\d\d\d\d)&quot;)&gt;&gt;&gt; match = reg.search(&quot;this is 345+7890&quot;)&gt;&gt;&gt; match.group(0)&apos;345+7890&apos;&gt;&gt;&gt; match.group(1)&apos;345&apos;&gt;&gt;&gt; match.group(2)&apos;7890&apos;&gt;&gt;&gt; match.groups()(&apos;345&apos;, &apos;7890&apos;)&gt;&gt;&gt; type(match)&lt;class &apos;_sre.SRE_Match&apos;&gt;</code></pre><h5 id="6-常见的pattern中匹配的通配字符的含义"><a href="#6-常见的pattern中匹配的通配字符的含义" class="headerlink" title="6.常见的pattern中匹配的通配字符的含义"></a>6.常见的pattern中匹配的通配字符的含义</h5><p>(注：若想让通配符表示其原有的含义，需使用 \ 转义)</p><ul><li>* 星号之前的分组，可以在文本中出现任意次。它可以完全不存在，或一次又一次地重复</li><li>? 匹配问号之前的分组零次或一次</li><li>+（加号）匹配一次或多次</li><li>\d 0 到 9 的任何数字 </li><li>\D 除 0 到 9 的数字以外的任何字符 </li><li>\w 任何字母、数字或下划线字符（可以认为是匹配“单词”字符） </li><li>\W 除字母、数字和下划线以外的任何字符 \s 空格、制表符或换行符（可以认为是匹配“空白”字符） </li><li>\S 除空格、制表符和换行符以外的任何字符 </li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>1.导入re</li><li>2.使用re.compile()创建一个regex对象</li><li>3.使用regex对象相关方法去匹配string,返回一个match对象</li><li>4.调用match对象的方法，返回匹配文本的字符串</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;regex用于匹配相应的类型，通常用于对于文本中的字符进行匹配和提取,以下只介绍python re模块的常见方法和regex的常见通配符&lt;/p&gt;
&lt;h3 id=&quot;python-re库&quot;&gt;&lt;a href=&quot;#python-re库&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="python" scheme="https://life0sfc.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://life0sfc.github.io/tags/python/"/>
    
      <category term="正则表达式" scheme="https://life0sfc.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>abexcrackme#2</title>
    <link href="https://life0sfc.github.io/2019/02/03/abexcrackme#2/"/>
    <id>https://life0sfc.github.io/2019/02/03/abexcrackme#2/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:55:51.970Z</updated>
    
    <content type="html"><![CDATA[<ul><li>实验环境：win xp32位虚拟机</li><li>程序：abexcrackme#2</li><li>实验工具：od<h4 id="破解程序"><a href="#破解程序" class="headerlink" title="破解程序"></a>破解程序</h4></li></ul><p>首先我们先观察一下程序的特征</p><p><img src="https://i.imgur.com/56MoLwG.png" alt=""></p><p>需要输入Name 和 Serial，检验后弹出正确的窗口<br>测试一下</p><p><img src="https://i.imgur.com/sP9pljo.png" alt=""></p><p>使用peid查看发现是VB程序，<br>用od打开</p><p><img src="https://i.imgur.com/rgn6rDv.png" alt=""></p><p>右键–&gt;Search for–&gt;All referenced text strings查看所有字符串<br>找到</p><p><img src="https://i.imgur.com/MgmnP1B.png" alt=""></p><p>进入字符串Congratulation!发现</p><p><img src="https://i.imgur.com/KhZJ3OX.png" alt=""><br>先是移动相关的字符串，然后调用消息框的代码04033BE</p><p>向上观察发现汇编代码中先压入了edx,eax然后call调用了函数，再执行test和je指令<br><img src="https://i.imgur.com/OhHyBDQ.png" alt=""><br>在32位的程序中函数调用时会将参数压入栈中，所以判断call调用的函数是判断字符串是否相等，可以在403321处下断点（F2）在重新开始程序（ctrl+f2），按F9运行程序，观察程序的运行，输入Name,Serial，这里设为123456，abcsdf，程序停在了403321处</p><p>在403329处下断点，按F9继续运行，查看edx,eax值</p><p><img src="https://i.imgur.com/hWQQCbe.png" alt=""></p><p>查看0012F4D4，0012F4C4存储在栈中的内存地址（选定地址–&gt;右键–&gt;Follow in dump）</p><p><img src="https://i.imgur.com/Qq85WlR.png" alt=""><br>此16个字节不是直接显示的字符串，可以使用在dump窗口long-&gt;Address with ASCII dump命令查看</p><p><img src="https://i.imgur.com/pTDoPqn.png" alt=""> </p><p>查看0012F4D4，0012F4C4在栈窗口中的值（Follow in stack）</p><p><img src="https://i.imgur.com/jYTS9Re.png" alt=""></p><p>可以发现eax为用户输入的Serial（VB使用unicode编码），而edx为实际的Serial值</p><p><img src="https://i.imgur.com/ZjjQvEc.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;实验环境：win xp32位虚拟机&lt;/li&gt;
&lt;li&gt;程序：abexcrackme#2&lt;/li&gt;
&lt;li&gt;实验工具：od&lt;h4 id=&quot;破解程序&quot;&gt;&lt;a href=&quot;#破解程序&quot; class=&quot;headerlink&quot; title=&quot;破解程序&quot;&gt;&lt;/a&gt;破解程序&lt;
      
    
    </summary>
    
      <category term="reverse" scheme="https://life0sfc.github.io/categories/reverse/"/>
    
    
      <category term="reverse" scheme="https://life0sfc.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>gdb的使用</title>
    <link href="https://life0sfc.github.io/2019/02/03/gdb%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://life0sfc.github.io/2019/02/03/gdb的使用/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:55:51.971Z</updated>
    
    <content type="html"><![CDATA[<p>gdb是linux下动态调试的工具，常见的动态调试工具主要有以下几个内容，我将结合gdb的命令进行介绍</p><h4 id="1、启动"><a href="#1、启动" class="headerlink" title="1、启动"></a>1、启动</h4><pre><code>start</code></pre><h4 id="2、断点"><a href="#2、断点" class="headerlink" title="2、断点"></a>2、断点</h4><pre><code>b *地址b 符号名    break &lt;function&gt; 在函数体入口处下断点。</code></pre><h4 id="3、单步"><a href="#3、单步" class="headerlink" title="3、单步"></a>3、单步</h4><pre><code>si: step in源码单步：next</code></pre><h4 id="4、查看内存"><a href="#4、查看内存" class="headerlink" title="4、查看内存"></a>4、查看内存</h4><pre><code>x/[]i 对指定数量的指令进行反汇编x/[]x 显示指定长度的数据   $rax  x/[]s以字符串形式显示数据</code></pre><p><code>x/10w $esp</code> 相当于显示栈上40B的数据，即栈上10个空间的数据</p><p>除了以上常见的四点外，gdb的常见命令还有</p><ul><li>set命令，常见的是set architecture，设置使用intel还是AT&amp;T语法，更多可使用help set查看</li><li>bt (backtrace)：打印出回溯的所有栈</li><li>disas反汇编命令，直接disas是反汇编当前函数<ul><li>disas /r      (显示汇编指令对应十六进制值)</li><li>disas /m      (如果有源码，显示对应行源码)</li></ul></li><li>help命令，以上的命令都可以查到相关说明</li></ul><p>相关插件<br>peda:<a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a><br>libheap:<a href="https://github.com/cloudburst/libheap" target="_blank" rel="noopener">https://github.com/cloudburst/libheap</a><br>以上只是一下gdb常见命令，更多可用help命令去查看，目前只想到这些，以后在补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gdb是linux下动态调试的工具，常见的动态调试工具主要有以下几个内容，我将结合gdb的命令进行介绍&lt;/p&gt;
&lt;h4 id=&quot;1、启动&quot;&gt;&lt;a href=&quot;#1、启动&quot; class=&quot;headerlink&quot; title=&quot;1、启动&quot;&gt;&lt;/a&gt;1、启动&lt;/h4&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="tools" scheme="https://life0sfc.github.io/categories/tools/"/>
    
    
      <category term="gdb" scheme="https://life0sfc.github.io/tags/gdb/"/>
    
      <category term="ctf" scheme="https://life0sfc.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>逆向题--逆向找出正确的flagre2</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E9%80%86%E5%90%91%E9%A2%98--%E9%80%86%E5%90%91%E6%89%BE%E5%87%BA%E6%AD%A3%E7%A1%AE%E7%9A%84flagre2/"/>
    <id>https://life0sfc.github.io/2019/02/03/逆向题--逆向找出正确的flagre2/</id>
    <published>2019-02-03T09:05:32.163Z</published>
    <updated>2018-10-14T03:38:17.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目：逆向找出正确的flagre2"><a href="#题目：逆向找出正确的flagre2" class="headerlink" title="题目：逆向找出正确的flagre2"></a>题目：<a href="https://pan.baidu.com/s/1uDEQ0gRUxHETYd_u9M2ghQ" target="_blank" rel="noopener">逆向找出正确的flagre2</a></h4><p>先检查一下<br><img src="https://i.imgur.com/PtuW1uK.png" alt=""><br>没壳，32位的程序</p><p>直接ida分析，查看伪c<br><img src="https://i.imgur.com/dKgCXwO.png" alt=""></p><p>先是输入input,经过sub_401032()函数，在下面是一个循环，循环内看不太懂，看下程序内的字符串，只发现<code>Try again!</code>，没有看到显示成功的字符串，一步一步分析吧！</p><p>进入sub_401032()函数观察<br><img src="https://i.imgur.com/soVffuk.png" alt=""><br>发现进行了异或运算<code>401100h^95h^input的第一个字符</code>，<br>得出return值的范围为<code>401100h~4011FFh</code><br>查看汇编代码</p><p><img src="https://i.imgur.com/cJprtgR.png" alt=""></p><ul><li>1 中将eax放入<code>[ebp+var_1C]</code></li><li>2 与0进行比较，执行后zf=0,不发生跳转</li><li>3 call addr,addr范围为<code>401100h~4011FFh</code></li></ul><p>观察<code>401100h~4011FFh</code>范围内的函数，发现ida没有识别出来，直接create function,<code>sub_401100() sub_401160() sub_4011C0()</code></p><p><img src="https://i.imgur.com/usT4oTV.png" alt=""></p><p><img src="https://i.imgur.com/14BBSUt.png" alt=""></p><p><img src="https://i.imgur.com/jWccMih.png" alt=""></p><p>00h^95h=149</p><p>60h^95h=245</p><p>c0h^95h=85</p><p>这里只有85小于ffh,所以会执行sub_4011C0()函数，打印出<code>o</code>字符，从输入的字符串中去第二个字符，分别于0x8f和^0x401200,范围为<code>0x401200~0x4012ff</code>,与上一次的情况相似，也是三个函数<br><img src="https://i.imgur.com/kMAqdUe.png" alt=""><br><img src="https://i.imgur.com/tUS455v.png" alt=""><br><img src="https://i.imgur.com/e74pipH.png" alt=""></p><p>推测应该是<code>n</code>,我们可以在下面的图中看到字符的引用，可以看到<code>Try again!</code></p><p><img src="https://i.imgur.com/FEsa7AU.png" alt=""><br>这一题的基本逻辑就出来了，输入字符串，取每一位与下面图中数据异或，决定下一个执行的函数并打印出相应的字符。</p><p><img src="https://i.imgur.com/L7Z8yJQ.png" alt=""><br>多次尝试，发现打印字符串应为<code>Congratulate</code>,推出输入的<code>input</code></p><p><img src="https://i.imgur.com/i14WGuZ.png" alt=""></p><p>在这题中ida的伪C代码会让人看不懂，还是直接通过看汇编代码去分析，对于不清晰的指令结合od去做判断。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目：逆向找出正确的flagre2&quot;&gt;&lt;a href=&quot;#题目：逆向找出正确的flagre2&quot; class=&quot;headerlink&quot; title=&quot;题目：逆向找出正确的flagre2&quot;&gt;&lt;/a&gt;题目：&lt;a href=&quot;https://pan.baidu.com/s
      
    
    </summary>
    
      <category term="ctf" scheme="https://life0sfc.github.io/categories/ctf/"/>
    
    
      <category term="reverse" scheme="https://life0sfc.github.io/tags/reverse/"/>
    
      <category term="ctf" scheme="https://life0sfc.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个blog</title>
    <link href="https://life0sfc.github.io/2019/02/03/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAblog/"/>
    <id>https://life0sfc.github.io/2019/02/03/搭建一个blog/</id>
    <published>2019-02-03T08:56:47.001Z</published>
    <updated>2019-02-08T12:24:18.576Z</updated>
    
    <content type="html"><![CDATA[<p>我是在windows下使用hexo来搭建blog的，hexo是一款简单、快速的博客框架，可以用来写<code>markdown</code>文件的博客</p><h4 id="一、安装git和nodejs"><a href="#一、安装git和nodejs" class="headerlink" title="一、安装git和nodejs"></a>一、安装git和nodejs</h4><p>git是一种分布式版本控制系统，我们搭建的<code>blog</code>要用到github，使用<br><code>username.github.io</code>为域名。<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a> 选择合适的版本下载并安装，安装完成后，右键会有关于git的两个按键</p><p>nodejs是运行在服务端的<code>JavaScript</code>,<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载地址</a>选择合适的版本下载并安装</p><h4 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h4><p>在你合适的地方新建一个<code>hexo</code>文件夹用于安装hexo，这里我选择在E盘下，在hexo文件夹中，打开git的命令行</p><pre><code>npm install -g hexo-cli    #-g 表示全局安装hexo init                  #初始化hexo install               #安装依赖</code></pre><p>本地测试</p><pre><code>hexo g   //生成文件,和更新类似hexo s  //本地启动，可在http://localhost:4000/本地访问博客</code></pre><p>在生成以及部署文章之前，需要安装一个扩展：<code>npm install hexo-deployer-git --save</code></p><p><img src="https://i.imgur.com/HeIJKGb.png" alt=""></p><ul><li><code>themes</code>文件夹稍后可以安装适合自己的主题</li><li><p><code>_config.yml</code>在文件中可修改配置文件<br><img src="https://i.imgur.com/LiYPDoY.png" alt=""></p></li><li><p><code>_post</code>文件夹中添加你写的md格式的博客</p></li></ul><h4 id="三、生成SSH并添加到github"><a href="#三、生成SSH并添加到github" class="headerlink" title="三、生成SSH并添加到github"></a>三、生成SSH并添加到github</h4><p>先在Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io。并且需要勾选Initialize this repository with a README<br><img src="https://i.imgur.com/TocS67e.png" alt=""><br>现在我们可以发现可以访问https://{username}.github.io/了<br>对本地的<code>hexo博客根目录\_config.yml</code>进行修改，添加如下内容</p><pre><code>deploy:   type: git  repository: https://github.com/life0sfc/life0sfc.github.io.git  branch: master</code></pre><p>将Hexo与Github page联系起来，设置Git的username和email</p><pre><code>$ git config --global user.name &quot;your name&quot;  $ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre><p>创建ssh密钥</p><pre><code>ssh-keygen -t rsa -C “your_email@youremail.com”</code></pre><p>会在~/.ssh文件夹中产生密钥文件<br><img src="https://i.imgur.com/Gg6thGN.png" alt=""></p><p>登录Github，点击头像下的settings，添加ssh，id_rsa.pub文件里的内容复制上去<br><img src="https://i.imgur.com/Y3DgM7M.png" alt=""><br>输入<code>ssh -T git@github.com</code>，测试添加ssh是否成功<br><img src="https://i.imgur.com/A6WxNeZ.png" alt=""><br>可以看到已经成功了</p><p>在Hexo博客根目录<br><img src="https://i.imgur.com/VUDRrdJ.png" alt=""><br>上传到github上<br><img src="https://i.imgur.com/wsSkS5p.png" alt=""></p><h4 id="四、优化你的博客"><a href="#四、优化你的博客" class="headerlink" title="四、优化你的博客"></a>四、优化你的博客</h4><h5 id="4-1-更改博客主题"><a href="#4-1-更改博客主题" class="headerlink" title="4.1 更改博客主题"></a>4.1 更改博客主题</h5><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>在<code>_config.yml</code>(这是在Hexo博客根目录下的文件)中将<code>theme: landscape</code>改成<code>theme: next</code></p><h5 id="4-2-添加RSS"><a href="#4-2-添加RSS" class="headerlink" title="4.2 添加RSS"></a>4.2 添加RSS</h5><p>在hexo根目录打开git bash，安装插件：</p><pre><code>npm install --save hexo-generator-feed</code></pre><p>修改<code>hexo博客根目录\_config.yml</code>文件，添加</p><pre><code>feed: # RSS订阅插件  type: atom  path: atom.xml  limit: 0plugins: hexo-generate-feed</code></pre><p>修改<code>hexo博客根目录\themes\next\_config.yml</code>（这是主题配置文件）文件，添加</p><pre><code>rss: /atom.xml</code></pre><h5 id="4-3-将博客地址加入搜索引擎"><a href="#4-3-将博客地址加入搜索引擎" class="headerlink" title="4.3 将博客地址加入搜索引擎"></a>4.3 将博客地址加入搜索引擎</h5><p>虽然我们将自己的博客托管到了github上，但是github是不会将站点信息提交给搜索引擎的（即使用搜索引擎是搜不到我们的博客的），所以我们必须手动将自己的博客站点提交给谷歌、百度的搜索引擎。</p><ul><li>验证站点<br>打开<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">谷歌搜索引擎验证</a>（需要翻墙），点击添加网站，输入自己的博客 地址，选择HTML标记验证</li></ul><p><img src="https://i.imgur.com/3055jwd.png" alt=""></p><p>打开本地博客主题下的<code>layout/_partial</code>文件夹，有一个名为<code>head.swig</code>的文件，使用编辑器打开，将刚才复制的两句 meta 代码粘贴进去<br>保存文件后，输入以下命令将博客重新部署到 GitHub服务器中。</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>完成验证<br><img src="https://i.imgur.com/tWn7tce.png" alt=""></p><ul><li>生成站点地图</li></ul><blockquote><p>站点地图可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。                                         —百度百科</p></blockquote><p>在hexo根目录打开git bash，安装插件：</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><p>打开hexo目录下的<code>_config.yml</code>文件，修改<code>url</code>参数为博客的首页地址，这样是为了保证能正确生成<code>sitemap.xml</code>文件中的地址。<br>添加以下配置</p><pre><code>sitemap:           //自动生成sitemap.xml  path: sitemap.xmlbaidusitemap:   path: baidusitemap.xml</code></pre><p>其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎，重新部署博客。</p><p>在<a href="https://search.google.com/search-console/sitemaps" target="_blank" rel="noopener">谷歌站点控制台</a>，提交站点地图<br><img src="https://i.imgur.com/MbrpqQB.png" alt=""><br>完成</p><h5 id="4-4-杂"><a href="#4-4-杂" class="headerlink" title="4.4 杂"></a>4.4 杂</h5><ul><li><p><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">统计阅读次数</a></p></li><li><p>添加评论区</p></li></ul><p>添加Valine评论系统<br>在主题配置文件中，修改以下处代码</p><pre><code>valine:  enable: true         #是否启用  appid:             #Leancloud中的appid  appkey:             #Leancloud中的appkey  notify: false     #收到回复是否Email通知  verify: false     #回复验证码  placeholder:       #评论框欢迎语  avatar: mm         #gravatar 头像默认风格  guest_info: nick,email,link     #需填写的信息  pageSize: 10         #评论页面大小</code></pre><ul><li><p>添加菜单选项</p><p>  hexo new page “categories”   // 添加分类页面<br>  hexo new page “tags”// 添加标签页面<br>  hexo new page “about” // 添加关于页面</p></li></ul><p><img src="https://i.imgur.com/8bB7JNv.png" alt=""></p><p>新建一篇博客，在cmd执行命令：hexo new post “博客名”</p><p>参考链接</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33616481" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33616481</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是在windows下使用hexo来搭建blog的，hexo是一款简单、快速的博客框架，可以用来写&lt;code&gt;markdown&lt;/code&gt;文件的博客&lt;/p&gt;
&lt;h4 id=&quot;一、安装git和nodejs&quot;&gt;&lt;a href=&quot;#一、安装git和nodejs&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="杂" scheme="https://life0sfc.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>helloword</title>
    <link href="https://life0sfc.github.io/2019/02/03/helloword/"/>
    <id>https://life0sfc.github.io/2019/02/03/helloword/</id>
    <published>2019-02-03T08:30:06.000Z</published>
    <updated>2019-02-03T08:59:46.108Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h4><p>博客搭建好了，记录所学（可能会很杂），提高自己。<br>立个flag: 每周至少更新一篇，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Helloworld&quot;&gt;&lt;a href=&quot;#Helloworld&quot; class=&quot;headerlink&quot; title=&quot;Helloworld&quot;&gt;&lt;/a&gt;Helloworld&lt;/h4&gt;&lt;p&gt;博客搭建好了，记录所学（可能会很杂），提高自己。&lt;br&gt;立个flag: 每周
      
    
    </summary>
    
    
      <category term="小记" scheme="https://life0sfc.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
